{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchtrending","fetchNetflixOriginals","fetchTopRated","FetchActionMovies","FetchComedyMovies","FetchHorrorMovies","FetchRomanceMovies","FetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movie","setmovies","trailUrl","settrailerurl","useEffect","a","get","request","data","results","fetchData","className","map","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playVars","autoplay","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPostion","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8SAAMA,G,YAAQ,oCAcEC,EAZD,CACVC,cAAc,8BAAD,OAA+BF,EAA/B,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,qBACrBI,cAAc,2BAAD,OAA4BJ,EAA5B,mBACbK,kBAAkB,2BAAD,OAA4BL,EAA5B,mBACjBM,kBAAkB,2BAAD,OAA4BN,EAA5B,mBACjBO,kBAAkB,2BAAD,OAA4BP,EAA5B,mBACjBQ,mBAAmB,2BAAD,OAA4BR,EAA5B,sBAClBS,mBAAmB,2BAAD,OAA4BT,EAA5B,oB,sCCJRU,E,OALAC,EAAMC,OAAO,CACxBC,QAAQ,iC,iCCwDGC,MAnDf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EACjBC,mBAAS,IADQ,mBACrCC,EADqC,KAC9BC,EAD8B,OAEVF,mBAAS,IAFC,mBAErCG,EAFqC,KAE3BC,EAF2B,KA8B5C,OA3BAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAIT,GADlC,cACQU,EADR,OAEEN,EAAUM,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdG,KACC,CAACb,IAqBF,yBAAKc,UAAU,OACb,4BAAKf,GACL,yBAAKe,UAAU,eACZX,EAAMY,KAAI,SAACZ,GAAD,OACT,yBACEa,IAAKb,EAAMc,GACXC,QAAS,kBAnBC,SAACf,GACfE,EACFC,EAAc,IAEda,KAAkB,OAALhB,QAAK,IAALA,OAAA,EAAAA,EAAOiB,OAAQ,IACzBC,MAAK,SAACC,GACL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDpB,EAAciB,EAAUd,IAAI,SAE7BkB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,YAUXC,CAAY5B,IAC3BW,UAAS,qBAAgBb,GAAc,mBACvC+B,IAAG,UAzCE,wCAyCF,OACD/B,EAAaE,EAAM8B,YAAc9B,EAAM+B,eAEzCC,IAAKhC,EAAMiB,WAIhBf,GAAY,kBAAC,IAAD,CAAS+B,QAAS/B,EAAUgC,KAnChC,CACXC,OAAQ,MACRC,MAAO,OACPC,SAAU,CACRC,SAAU,Q,MC6BDC,MA9Cf,WAAmB,IAgBCC,EAAKC,EAhBP,EACW1C,mBAAS,IADpB,mBACTC,EADS,KACFC,EADE,KAoBhB,OAlBAG,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAIxB,EAASE,uBAD3C,cACQuB,EADR,OAEEN,EACEM,EAAQC,KAAKC,QACXiC,KAAKC,MAAMD,KAAKE,SAAWrC,EAAQC,KAAKC,QAAQoC,OAAS,KAJ/D,kBAOStC,GAPT,4CADc,uBAAC,WAAD,wBAUdG,KACC,IACHgB,QAAQC,IAAI3B,GAOV,4BACEW,UAAU,SACVmC,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,4DAAD,cAC8BhD,QAD9B,IAC8BA,OAD9B,EAC8BA,EAAO+B,cADrC,kBAGfkB,kBAAmB,kBAGrB,yBAAKtC,UAAU,mBACb,wBAAIA,UAAU,iBACN,OAALX,QAAK,IAALA,OAAA,EAAAA,EAAOJ,SAAP,OAAgBI,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOiB,QAAvB,OAA+BjB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOkD,gBAEzC,yBAAKvC,UAAU,kBACb,4BAAQA,UAAU,kBAAlB,QACA,4BAAQA,UAAU,kBAAlB,YAEF,wBAAIA,UAAU,uBAvBF6B,EAuBgC,OAACxC,QAAD,IAACA,OAAD,EAACA,EAAOmD,SAvBnCV,EAuB6C,KAtBxD,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKK,QAASJ,EAAID,EAAIY,OAAO,EAAGX,EAAI,GAAK,MAAQD,KAwBtD,yBAAK7B,UAAU,yB,MCbN0C,MA9Bf,WAAgB,IAAD,EACctD,oBAAS,GADvB,mBACNuD,EADM,KACAC,EADA,KAcb,OAZAnD,qBAAU,WAQR,OAPAoD,OAAOC,iBAAiB,UAAU,WAC5BD,OAAOE,QAAU,IACnBH,GAAW,GAEXA,GAAW,MAGR,WACLC,OAAOG,oBAAoB,aAE5B,IAED,yBAAKhD,UAAS,cAAS2C,GAAQ,cAC7B,yBACE3C,UAAU,WACVkB,IAAI,yGACJG,IAAI,SAEN,yBACErB,UAAU,aACVkB,IAAI,wGACJG,IAAI,mBCAG4B,MArBf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEf,MAAM,mBACNC,SAAUf,EAASE,sBACnBc,YAAY,IAEd,kBAAC,EAAD,CAAKF,MAAM,eAAeC,SAAUf,EAASC,gBAC7C,kBAAC,EAAD,CAAKa,MAAM,YAAYC,SAAUf,EAASG,gBAC1C,kBAAC,EAAD,CAAKW,MAAM,gBAAgBC,SAAUf,EAASI,oBAC9C,kBAAC,EAAD,CAAKU,MAAM,gBAAgBC,SAAUf,EAASK,oBAC9C,kBAAC,EAAD,CAAKS,MAAM,gBAAgBC,SAAUf,EAASM,oBAC9C,kBAAC,EAAD,CAAKQ,MAAM,iBAAiBC,SAAUf,EAASO,qBAC/C,kBAAC,EAAD,CAAKO,MAAM,gBAAgBC,SAAUf,EAASQ,uBCVhCuE,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkD,c","file":"static/js/main.f3476243.chunk.js","sourcesContent":["const API_KEY=\"2569e16c179969c990eb54ea6bb785d5\";\r\n\r\nconst requests={\r\n     fetchtrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n     fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n     fetchTopRated:`movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n     FetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n     FetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n     FetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n     FetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n     FetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n }\r\n\r\n export default requests;","import axios from \"axios\"\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\n\r\nexport default instance;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movie, setmovies] = useState([]);\r\n  const [trailUrl, settrailerurl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setmovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handleClick = (movie) => {\r\n    if (trailUrl) {\r\n      settrailerurl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          settrailerurl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(\"error\"));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movie.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailUrl && <YouTube videoId={trailUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport requests from \"./requests\";\r\nimport axios from \"./axios\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setmovies] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setmovies(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n              \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n          )`,\r\n        backgroundPostion: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My list</button>\r\n        </div>\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadebottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://assets.brand.microsites.netflix.io/assets/1ed15bca-b389-11e7-9274-06c476b5c346_cm_800w.png?v=6\"\r\n        alt=\"logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRxFFI01LRKeDdPLt-KrFZLLfong8FegBFP0w&usqp=CAU\"\r\n        alt=\"netflix_logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport requests from \"./requests\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINAL\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchtrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.FetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.FetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.FetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.FetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.FetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}